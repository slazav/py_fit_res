#!/usr/bin/python3

import numpy
import scipy.optimize
import matplotlib.pyplot as plt

import sys
sys.path.append('/home/sla/PROG/py_fit_res')
import fit_res


################################################################################
## Load data
FF,XX,YY,DD = numpy.loadtxt("example7.txt", usecols=(1,2,3,4), unpack=True)
sh = 0.5e-7

drives = numpy.unique(DD)
ii = numpy.logical_or.reduce(
  (DD==drives[4], DD==drives[8], DD==drives[10], DD==drives[12], DD==drives[16]))
FF=FF[ii]
XX=XX[ii]
YY=YY[ii]
DD=DD[ii]
drives = numpy.unique(DD)

##########

ffunc=None
dfunc=None
jj = numpy.hypot(XX,YY) < 0.9e-7
cbg0=0

pf = [1590, 1e-4, 1.8, 1e-6]
pd = [3.0, 0.378, 0.0715, 1.88]

for i in (1,2,3,4,):
  print('step ', i)
  # refit using non-linear function

  fit = fit_res.fit_nonlin(FF[jj],XX[jj],YY[jj],DD[jj], do_fit=1,
     cbg0=cbg0, cbg=1, lbg=0, coord=0, dfunc=dfunc, ffunc=ffunc)
  cbg0=1

  Amp = fit.get_amp()
  F0 = fit.get_f0()
  dF = fit.get_df()

  VV = XX + 1j*YY - fit.func_bg(FF, DD)
  CC = VV * F0/FF/1j
  II = FF**2 + Amp*DD*dF*F0/CC
  F0n = numpy.sqrt(numpy.real(II))
  dFn = numpy.imag(II)/FF

  def ffunc_f(x, p1,p2,p3,p4):
    return p1*(1 - p2*x**2 - p4*x**4 - numpy.exp((x-p3)/0.03))

  def dfunc_f(x, p1, p2, p3, p4):
    return p1*(1 - p2*x + p3*x**2 + numpy.exp((x-p4)/0.03))

  xx = 1e7*numpy.abs(CC)
  iig=xx>0.4
  pf = scipy.optimize.curve_fit(ffunc_f, xx[iig], F0n[iig],
     sigma=xx[iig], p0=pf, maxfev=10000)[0]

  xx = 1e7*numpy.abs(VV)
  iig=xx>0.4
  pd = scipy.optimize.curve_fit(dfunc_f, xx[iig], dFn[iig],
    sigma=xx[iig], p0=pd, maxfev=10000)[0]

  def ffunc(cc): return ffunc_f(1e7*cc, *pf)/pf[0]
  def dfunc(vv): return dfunc_f(1e7*vv, *pd)/pd[0]

  F0 = fit.pars[2] = pf[0]
  dF = fit.pars[3] = pd[0]

#########
# plot results

(fig, ax) = plt.subplots(2,3)

ff=numpy.linspace(numpy.min(FF), numpy.max(FF), 200)
ff=numpy.append(ff, numpy.flip(ff))
cc=numpy.linspace(0,numpy.max(abs(CC))*1.05, 200)
vv=numpy.linspace(0,numpy.max(abs(VV))*1.05, 200)

n=0
for d in drives:
  ii = DD==d
  n+=1
  C = 'C%d'%(n%10)

  # data
  ax[0,0].plot(FF[ii], -n*sh+XX[ii], C+'.-')
  ax[0,1].plot(FF[ii], n*sh+YY[ii], C+'.-')
  ax[0,2].plot(FF[ii], n*sh+numpy.hypot(XX[ii],YY[ii]), C+'.-', label='%.1fnA'%(d*1e9))

  ## fit
  xx = fit.func(ff, d)
  ax[0,0].plot(ff, -n*sh+numpy.real(xx), 'k-', linewidth=0.8)
  ax[0,1].plot(ff, n*sh+numpy.imag(xx), 'k-', linewidth=0.8)
  ax[0,2].plot(ff, n*sh+numpy.abs(xx), 'k-', linewidth=0.8)

#  ## bg
#  bg = fit.func_bg(ff, d)
#  ax[0,0].plot(ff, -n*sh+numpy.real(bg), 'k--', linewidth=0.8)
#  ax[0,1].plot(ff, n*sh+numpy.imag(bg), 'k--', linewidth=0.8)
#  ax[0,2].plot(ff, n*sh+numpy.abs(bg), 'k--', linewidth=0.8)

  # F0n, dFn
  ax[1,0].plot(numpy.abs(CC[ii]), F0n[ii], C+'.')
  ax[1,1].plot(numpy.abs(VV[ii]), dFn[ii], C+'.')

#  ax[1,0].plot(cc,numpy.polyval(pF0n, cc), 'k-', linewidth=0.5)
#  ax[1,1].plot(vv,numpy.polyval(pdFn, vv), 'k-', linewidth=0.5)

  ax[1,0].plot(cc,F0*ffunc(cc), 'k-', linewidth=0.5)
  ax[1,1].plot(vv,dF*dfunc(vv), 'k-', linewidth=0.5)

  # gradients
  #ax[1,2].plot(FF[ii], numpy.gradient(abs(VV[ii])), C+'.-')

#  numpy.savetxt('pl%d_data.txt'%(n), numpy.column_stack((FF[ii],XX[ii],YY[ii],abs(CC[ii]),F0n[ii],abs(VV[ii]),dFn[ii])))
#  numpy.savetxt('pl%d_fit.txt'%(n),  numpy.column_stack((ff, xx.real, xx.imag)))
#  numpy.savetxt('pl%d_funcs.txt'%(n), numpy.column_stack((cc,F0*ffunc(cc),vv,dF*dfunc(vv))))



######

ax[1,0].set_ylim((1588,1591))
ax[1,1].set_ylim((0,4))

ax[0,2].legend()
ax[0,0].set_title('Re(V) [Vrms]')
ax[0,1].set_title('Im(V) [Vrms]')
ax[0,2].set_title('|V| [Vrms]')
for i in (0,1,2): ax[0,i].set_xlabel('freq [Hz]')

plt.gcf().set_size_inches(10, 10)
plt.savefig("example7.png", dpi=100)
plt.close()


