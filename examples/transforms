#!/usr/bin/python3

import numpy
import math
import matplotlib.pyplot as plt
import scipy.special as sp

import sys
sys.path.insert(0,'..')
import fit_res

# non-linear force for B-phase damping
def func1(x): return -numpy.sign(x)*(1-numpy.exp(-numpy.abs(x)))

# damping function (calculated transform of func1)
def tr1_calc(yy): return fit_res.transform(func1, yy, dfunc0=-1)

# derivative of tr1_calc
def dtr1_calc(yy, e=1e-6):
  return (fit_res.transform(func1, yy+e, dfunc0=-1) - fit_res.transform(func1, yy, dfunc0=-1))/e

# damping function (theory)
def tr1_theory(yy): return 2/yy*(2/math.pi + sp.iv(1, yy) - sp.modstruve(-1,yy))

# damping function (approximation)
def tr1_approx(yy): return 1.0/(1 + 0.477*yy**1.16)
def dtr1_approx(yy): return -0.477*yy**0.16/(1 + 0.477*yy**1.16)**2

xx=numpy.linspace(-10, 10, 100)
yy=numpy.linspace(0.01, 10, 100)

# Check how the transformation works for different argument types
# float/int/numpy.array,tuple,list of float/int
#print(fit_res.transform(func, numpy.array([0,1,2,3]), dfunc0=-1))
#print(fit_res.transform(func, [0,1,2,3], dfunc0=-1))
#print(fit_res.transform(func, (0,1,2,3), dfunc0=-1))
#print(fit_res.transform(func, (0.0,1.0,2.0,3.0), dfunc0=-1))
#print(fit_res.transform(func, 1))
#print(fit_res.transform(func, 1.0))
#print(fit_res.transform(func, 0, dfunc0=-1))
#print(fit_res.transform(func, 0))

(fig,ax) = plt.subplots(1,2)

### Duffing term
#def func2(x): return -x**3
#def tr2(x): return 3/4*x**2
#def dtr2(x): return 3/2*x
#ax[0].plot(xx, func2(xx), 'b-', label="test")
#ax[0].plot(xx, fit_res.itransform(tr2, dtr2, xx), 'g-', label="test")

# non-linear force (original and forward+backward transform)
ax[0].plot(xx, fit_res.itransform(tr1_calc, dtr1_calc, xx),
               'r.-', label="tr + itr")
ax[0].plot(xx, func1(xx), 'k--', label="theory")

ax[0].legend()
ax[0].set_title('non-linear force f(v/v0)')
ax[1].set_xlabel('v/v0')

# damping function
ax[1].plot(yy, tr1_calc(yy), 'r.-', label="calc", linewidth=3)
ax[1].plot(yy, tr1_theory(yy), 'k--', label="theory")
ax[1].plot(yy, tr1_approx(yy), 'b.-', label="approx")

ax[1].set_xlim((0,None))
ax[1].set_ylim((0,None))
ax[1].set_title('B-phase damping function F(|v|/v0)')
ax[1].legend()
ax[1].set_xlabel('|v|/v0')

plt.gcf().set_size_inches(10, 10)
plt.savefig("transforms1.png", dpi=100)
plt.close()
